name: Continuous Deployment

on:
  push:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and push Docker images
  build-images:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    strategy:
      matrix:
        service: [api, web]

    permissions:
      contents: read
      packages: write

    outputs:
      api-image: ${{ steps.meta-api.outputs.tags }}
      web-image: ${{ steps.meta-web.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta-${{ matrix.service }}
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-,format=short
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=staging,enable=${{ github.ref == 'refs/heads/develop' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta-${{ matrix.service }}.outputs.tags }}
          labels: ${{ steps.meta-${{ matrix.service }}.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.service }}
          cache-to: type=gha,mode=max,scope=${{ matrix.service }}
          platforms: linux/amd64

      - name: Image digest
        run: echo "Image pushed with digest ${{ steps.meta-${{ matrix.service }}.outputs.digest }}"

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-images

    strategy:
      matrix:
        service: [api, web]

    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}:${{ github.ref_name }}-${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'
          category: 'trivy-${{ matrix.service }}'

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-images, security-scan]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging.simplepro.example.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.STAGING_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.STAGING_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to staging server
        run: |
          ssh ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} << 'ENDSSH'
            cd /opt/simplepro

            # Pull latest images
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api:staging
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-web:staging

            # Update docker-compose with new images
            export API_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api:staging
            export WEB_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-web:staging

            # Rolling update
            docker-compose -f docker-compose.staging.yml up -d --no-deps api web

            # Wait for health checks
            sleep 10
            docker-compose -f docker-compose.staging.yml ps
          ENDSSH

      - name: Run smoke tests
        run: |
          # Wait for services to be ready
          sleep 15

          # Health check API
          curl -f https://staging-api.simplepro.example.com/api/health || exit 1

          # Health check Web
          curl -f https://staging.simplepro.example.com/health || exit 1

          echo "Smoke tests passed"

      - name: Notify deployment success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "✅ Staging deployment successful",
              attachments: [{
                color: 'good',
                text: `Commit: ${{ github.sha }}\nAuthor: ${{ github.actor }}\nURL: https://staging.simplepro.example.com`
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Rollback on failure
        if: failure()
        run: |
          ssh ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} << 'ENDSSH'
            cd /opt/simplepro
            docker-compose -f docker-compose.staging.yml rollback
          ENDSSH

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-images, security-scan]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://simplepro.example.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create deployment backup
        run: |
          ssh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'ENDSSH'
            cd /opt/simplepro
            ./scripts/backup-all.sh pre-deployment
          ENDSSH

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PRODUCTION_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.PRODUCTION_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to production server
        run: |
          ssh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'ENDSSH'
            cd /opt/simplepro

            # Pull latest images
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api:latest
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-web:latest

            # Update docker-compose with new images
            export API_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api:latest
            export WEB_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-web:latest

            # Blue-green deployment
            docker-compose -f docker-compose.prod.yml up -d --no-deps --scale api=2 --scale web=2 api web

            # Wait for new containers to be healthy
            sleep 20

            # Remove old containers
            docker-compose -f docker-compose.prod.yml up -d --no-deps --scale api=1 --scale web=1 api web
          ENDSSH

      - name: Run comprehensive health checks
        run: |
          # Wait for services to stabilize
          sleep 30

          # Health check API
          curl -f https://api.simplepro.example.com/api/health || exit 1

          # Health check Web
          curl -f https://simplepro.example.com/health || exit 1

          # Database connectivity
          curl -f https://api.simplepro.example.com/api/health/db || exit 1

          # Redis connectivity
          curl -f https://api.simplepro.example.com/api/health/redis || exit 1

          echo "Production health checks passed"

      - name: Run smoke tests
        run: |
          # Test critical endpoints
          curl -f https://api.simplepro.example.com/api/health
          curl -f https://api.simplepro.example.com/api/estimates/health

          echo "Production smoke tests passed"

      - name: Notify deployment success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "🚀 Production deployment successful",
              attachments: [{
                color: 'good',
                text: `Commit: ${{ github.sha }}\nAuthor: ${{ github.actor }}\nURL: https://simplepro.example.com`
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Rollback on failure
        if: failure()
        run: |
          ssh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'ENDSSH'
            cd /opt/simplepro
            echo "Rolling back to previous version..."
            docker-compose -f docker-compose.prod.yml rollback
            ./scripts/restore-mongodb.sh latest
          ENDSSH

          # Notify about rollback
          curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
            -H 'Content-Type: application/json' \
            -d '{"text":"⚠️ Production deployment failed and was rolled back"}'

  # Post-deployment monitoring
  post-deployment-check:
    name: Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always() && needs.deploy-production.result == 'success'

    steps:
      - name: Monitor application metrics
        run: |
          echo "Monitoring production metrics for 5 minutes..."

          for i in {1..5}; do
            echo "Check $i/5 at $(date)"

            # Check API response time
            response_time=$(curl -o /dev/null -s -w '%{time_total}\n' https://api.simplepro.example.com/api/health)
            echo "API response time: ${response_time}s"

            # Check error rate from metrics endpoint
            error_rate=$(curl -s https://api.simplepro.example.com/metrics | grep 'http_errors_total' | tail -1 || echo "0")
            echo "Error rate: $error_rate"

            sleep 60
          done

          echo "Post-deployment monitoring complete"

      - name: Alert if metrics degraded
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "⚠️ Production metrics show degradation after deployment",
              attachments: [{
                color: 'warning',
                text: "Please check Grafana dashboards and consider rollback"
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
