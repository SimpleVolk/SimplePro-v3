name: Continuous Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20'
  NX_CLOUD_DISTRIBUTED_EXECUTION: false

jobs:
  # Install and cache dependencies
  install:
    name: Install Dependencies
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci --legacy-peer-deps

      - name: Cache install success
        run: echo "Dependencies installed successfully"

  # Code quality checks
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    needs: install

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Run ESLint
        run: npm run lint

      - name: Check formatting
        run: npx prettier --check "**/*.{ts,tsx,js,jsx,json,md,yml,yaml}"

  # Type checking
  type-check:
    name: TypeScript Type Check
    runs-on: ubuntu-latest
    needs: install

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Check TypeScript compilation
        run: npx tsc --noEmit --project tsconfig.base.json

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: install

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Check for known vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Unit and integration tests
  test-pricing-engine:
    name: Test Pricing Engine
    runs-on: ubuntu-latest
    needs: install

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Run pricing engine tests
        run: npm run test:pricing -- --coverage --watchAll=false --ci

      - name: Upload pricing engine coverage
        uses: codecov/codecov-action@v4
        with:
          files: ./packages/pricing-engine/coverage/lcov.info
          flags: pricing-engine
          name: pricing-engine-coverage
          token: ${{ secrets.CODECOV_TOKEN }}

  test-api:
    name: Test API
    runs-on: ubuntu-latest
    needs: install

    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password123
          MONGO_INITDB_DATABASE: simplepro_test
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Run API unit tests
        run: npm run test:api -- --coverage --watchAll=false --ci
        env:
          MONGODB_URI: mongodb://admin:password123@localhost:27017/simplepro_test?authSource=admin
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret-key-for-testing-only
          JWT_REFRESH_SECRET: test-jwt-refresh-secret-key-for-testing-only
          NODE_ENV: test

      - name: Upload API coverage
        uses: codecov/codecov-action@v4
        with:
          files: ./apps/api/coverage/lcov.info
          flags: api
          name: api-coverage
          token: ${{ secrets.CODECOV_TOKEN }}

  test-web:
    name: Test Web
    runs-on: ubuntu-latest
    needs: install

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Run web tests
        run: npm run test:web -- --coverage --watchAll=false --ci

      - name: Upload web coverage
        uses: codecov/codecov-action@v4
        with:
          files: ./apps/web/coverage/lcov.info
          flags: web
          name: web-coverage
          token: ${{ secrets.CODECOV_TOKEN }}

  # Build applications
  build:
    name: Build Applications
    runs-on: ubuntu-latest
    needs: [lint, type-check, test-pricing-engine, test-api, test-web]

    strategy:
      matrix:
        app: [pricing-engine, api, web]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Build ${{ matrix.app }}
        run: npx nx build ${{ matrix.app }} --prod

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.app }}
          path: dist/
          retention-days: 7

  # Final status check
  ci-success:
    name: CI Pipeline Success
    runs-on: ubuntu-latest
    needs: [lint, type-check, security, test-pricing-engine, test-api, test-web, build]
    if: always()

    steps:
      - name: Check CI status
        run: |
          if [ "${{ needs.lint.result }}" != "success" ] || \
             [ "${{ needs.type-check.result }}" != "success" ] || \
             [ "${{ needs.test-pricing-engine.result }}" != "success" ] || \
             [ "${{ needs.test-api.result }}" != "success" ] || \
             [ "${{ needs.test-web.result }}" != "success" ] || \
             [ "${{ needs.build.result }}" != "success" ]; then
            echo "CI pipeline failed"
            exit 1
          fi
          echo "CI pipeline passed successfully"

      - name: Post status to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'âœ… CI Pipeline passed successfully! Ready for review.'
            })
