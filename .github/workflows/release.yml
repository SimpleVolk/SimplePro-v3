name: Release Pipeline

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.2.3)'
        required: true
        type: string

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

jobs:
  # Create GitHub Release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.get-version.outputs.version }}
      upload_url: ${{ steps.create-release.outputs.upload_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: get-version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Generate changelog
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v4
        with:
          configuration: .github/changelog-config.json
          toTag: ${{ steps.get-version.outputs.version }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get-version.outputs.version }}
          release_name: Release ${{ steps.get-version.outputs.version }}
          body: |
            # SimplePro-v3 ${{ steps.get-version.outputs.version }}

            ## Changes
            ${{ steps.changelog.outputs.changelog }}

            ## Docker Images
            - API: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api:${{ steps.get-version.outputs.version }}`
            - Web: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-web:${{ steps.get-version.outputs.version }}`

            ## Deployment
            See [deployment documentation](docs/operations/DEPLOYMENT.md) for production deployment instructions.

            ## Verification
            After deployment, verify the version:
            ```bash
            curl https://api.simplepro.example.com/api/health | jq '.version'
            ```
          draft: false
          prerelease: ${{ contains(steps.get-version.outputs.version, '-rc') || contains(steps.get-version.outputs.version, '-beta') || contains(steps.get-version.outputs.version, '-alpha') }}

  # Build production artifacts
  build-artifacts:
    name: Build Production Artifacts
    runs-on: ubuntu-latest
    needs: create-release

    strategy:
      matrix:
        app: [pricing-engine, api, web]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Build ${{ matrix.app }}
        run: npx nx build ${{ matrix.app }} --prod

      - name: Create artifact archive
        run: |
          cd dist
          if [ -d "apps/${{ matrix.app }}" ]; then
            tar -czf ${{ matrix.app }}-${{ needs.create-release.outputs.version }}.tar.gz apps/${{ matrix.app }}
          elif [ -d "packages/${{ matrix.app }}" ]; then
            tar -czf ${{ matrix.app }}-${{ needs.create-release.outputs.version }}.tar.gz packages/${{ matrix.app }}
          fi

      - name: Upload artifact to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./dist/${{ matrix.app }}-${{ needs.create-release.outputs.version }}.tar.gz
          asset_name: ${{ matrix.app }}-${{ needs.create-release.outputs.version }}.tar.gz
          asset_content_type: application/gzip

  # Build and tag production Docker images
  build-production-images:
    name: Build Production Docker Images
    runs-on: ubuntu-latest
    needs: create-release

    strategy:
      matrix:
        service: [api, web]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.create-release.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.create-release.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.create-release.outputs.version }}
            type=raw,value=latest

      - name: Build and push production Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            ${{ steps.meta.outputs.labels }}
            org.opencontainers.image.version=${{ needs.create-release.outputs.version }}
            org.opencontainers.image.title=SimplePro-${{ matrix.service }}
          cache-from: type=gha,scope=${{ matrix.service }}-prod
          cache-to: type=gha,mode=max,scope=${{ matrix.service }}-prod
          platforms: linux/amd64,linux/arm64
          build-args: |
            VERSION=${{ needs.create-release.outputs.version }}
            BUILD_DATE=${{ github.event.repository.updated_at }}

      - name: Sign container images
        run: |
          echo "Container image signing with cosign would go here"
          # cosign sign --key env://COSIGN_KEY ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}:${{ needs.create-release.outputs.version }}

  # Security scan production images
  security-scan-production:
    name: Security Scan Production Images
    runs-on: ubuntu-latest
    needs: [create-release, build-production-images]

    strategy:
      matrix:
        service: [api, web]

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}:${{ needs.create-release.outputs.version }}
          format: 'json'
          output: 'trivy-results-${{ matrix.service }}.json'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '1'

      - name: Upload scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-${{ matrix.service }}
          path: trivy-results-${{ matrix.service }}.json

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [create-release, build-production-images, security-scan-production]
    environment:
      name: production
      url: https://simplepro.example.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create pre-deployment backup
        run: |
          ssh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'ENDSSH'
            cd /opt/simplepro
            ./scripts/backup-all.sh release-${{ needs.create-release.outputs.version }}
          ENDSSH

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PRODUCTION_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.PRODUCTION_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy release to production
        run: |
          ssh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'ENDSSH'
            cd /opt/simplepro

            # Set version in environment
            echo "VERSION=${{ needs.create-release.outputs.version }}" >> .env.production

            # Pull versioned images
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api:${{ needs.create-release.outputs.version }}
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-web:${{ needs.create-release.outputs.version }}

            # Update docker-compose
            export API_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api:${{ needs.create-release.outputs.version }}
            export WEB_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-web:${{ needs.create-release.outputs.version }}

            # Blue-green deployment
            docker-compose -f docker-compose.prod.yml up -d --no-deps api web

            # Wait for health checks
            sleep 30

            # Verify deployment
            docker-compose -f docker-compose.prod.yml ps
          ENDSSH

      - name: Verify production deployment
        run: |
          # Health checks
          curl -f https://api.simplepro.example.com/api/health
          curl -f https://simplepro.example.com/health

          # Version verification
          VERSION=$(curl -s https://api.simplepro.example.com/api/health | jq -r '.version')
          if [ "$VERSION" != "${{ needs.create-release.outputs.version }}" ]; then
            echo "Version mismatch! Expected ${{ needs.create-release.outputs.version }}, got $VERSION"
            exit 1
          fi

          echo "Production deployment verified successfully"

      - name: Tag deployment in monitoring
        run: |
          # Create deployment annotation in Grafana
          curl -X POST https://grafana.simplepro.example.com/api/annotations \
            -H "Authorization: Bearer ${{ secrets.GRAFANA_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "tags": ["deployment", "production"],
              "text": "Deployed ${{ needs.create-release.outputs.version }}",
              "time": '$(date +%s000)'
            }'

      - name: Notify release success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "🎉 Production release ${{ needs.create-release.outputs.version }} deployed successfully",
              attachments: [{
                color: 'good',
                text: "Release notes: https://github.com/${{ github.repository }}/releases/tag/${{ needs.create-release.outputs.version }}\nURL: https://simplepro.example.com"
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Rollback on failure
        if: failure()
        run: |
          ssh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'ENDSSH'
            cd /opt/simplepro
            echo "Rolling back deployment..."
            docker-compose -f docker-compose.prod.yml down
            ./scripts/restore-mongodb.sh latest
            docker-compose -f docker-compose.prod.yml up -d
          ENDSSH

  # Post-release tasks
  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [create-release, deploy-production]
    if: always()

    steps:
      - name: Update documentation
        run: |
          echo "Update deployment docs with version ${{ needs.create-release.outputs.version }}"

      - name: Notify stakeholders
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "📋 Post-release checklist for ${{ needs.create-release.outputs.version }}",
              attachments: [{
                color: '#2196F3',
                text: "1. Monitor error rates\n2. Check performance metrics\n3. Review user feedback\n4. Update customer-facing docs"
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
