version: '3.9'

services:
  # Development reverse proxy and load balancer
  nginx-dev:
    image: nginx:alpine
    container_name: simplepro-nginx-dev
    restart: unless-stopped
    ports:
      - "80:80"      # Only HTTP exposed for development
      - "443:443"    # HTTPS for testing SSL
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/dev.conf:/etc/nginx/conf.d/default.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - frontend-network
      - backend-network
    depends_on:
      - api-dev
      - web-dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # SimplePro API (Development)
  api-dev:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
      target: development  # Use development stage
    container_name: simplepro-api-dev
    restart: unless-stopped
    # No direct port exposure - only accessible via nginx
    environment:
      NODE_ENV: development
      PORT: 4000
      DATABASE_URL: mongodb://admin:${MONGODB_PASSWORD:-simplepro_dev_2024}@mongodb:27017/simplepro?authSource=admin
      REDIS_URL: redis://:${REDIS_PASSWORD:-simplepro_redis_2024}@redis:6379
      JWT_SECRET: ${JWT_SECRET:-dev_jwt_secret_change_in_production}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-dev_refresh_secret_change_in_production}
      CORS_ORIGIN: http://localhost:80,https://localhost:443
      LOG_LEVEL: debug
    volumes:
      - ./apps/api/src:/app/src:ro  # Development hot reload
      - ./logs:/app/logs
    networks:
      - backend-network
      - storage-network
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # SimplePro Web Application (Development)
  web-dev:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
      target: development  # Use development stage
    container_name: simplepro-web-dev
    restart: unless-stopped
    # No direct port exposure - only accessible via nginx
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost/api
      NEXT_TELEMETRY_DISABLED: 1
    volumes:
      - ./apps/web/src:/app/src:ro  # Development hot reload
    networks:
      - frontend-network
      - backend-network
    depends_on:
      - api-dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # MongoDB Database (Internal Network Only)
  mongodb:
    image: mongo:7.0
    container_name: simplepro-mongodb-dev
    restart: unless-stopped
    # No direct port exposure - only accessible via internal network
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD:-simplepro_dev_2024}
      MONGO_INITDB_DATABASE: simplepro
    volumes:
      - mongodb_data:/data/db
      - ./docker/mongodb/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - storage-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache (Internal Network Only)
  redis:
    image: redis:7-alpine
    container_name: simplepro-redis-dev
    restart: unless-stopped
    # No direct port exposure - only accessible via internal network
    command: redis-server --requirepass ${REDIS_PASSWORD:-simplepro_redis_2024}
    volumes:
      - redis_data:/data
    networks:
      - storage-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO (S3-compatible storage) - Console only for development
  minio:
    image: minio/minio:latest
    container_name: simplepro-minio-dev
    restart: unless-stopped
    # Only expose console for development debugging - API internal only
    ports:
      - "127.0.0.1:9001:9001"  # Console only accessible from localhost
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-admin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-simplepro_minio_2024}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - storage-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Development Database Admin Tool (Optional)
  mongo-express:
    image: mongo-express:latest
    container_name: simplepro-mongo-express
    restart: unless-stopped
    ports:
      - "127.0.0.1:8081:8081"  # Only accessible from localhost
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGODB_PASSWORD:-simplepro_dev_2024}
      ME_CONFIG_MONGODB_URL: mongodb://admin:${MONGODB_PASSWORD:-simplepro_dev_2024}@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_PASSWORD:-dev_admin_password}
    networks:
      - storage-network
    depends_on:
      mongodb:
        condition: service_healthy

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  # Frontend network - allows external access via nginx
  frontend-network:
    driver: bridge
    internal: false
    ipam:
      config:
        - subnet: 172.20.0.0/24

  # Backend network - internal API communication
  backend-network:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.21.0.0/24

  # Storage network - database and file storage
  storage-network:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.22.0.0/24

  # Monitoring network - observability tools (for future use)
  monitoring-network:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.23.0.0/24