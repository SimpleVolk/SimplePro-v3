{
  "permissions": {
    "allow": [
      "Bash(PORT=3009 npm run dev:web)",
      "Bash(PORT=3001 npm run dev:api)",
      "Bash(TOKEN=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2OGQ5ODdhOTA1YmE5Y2E2OWExZDQ2OTkiLCJ1c2VybmFtZSI6ImFkbWluIiwiZW1haWwiOiJhZG1pbkBzaW1wbGVwcm8uY29tIiwicm9sZSI6InN1cGVyX2FkbWluIiwicGVybWlzc2lvbnMiOlsidXNlcnM6Y3JlYXRlIiwidXNlcnM6cmVhZCIsInVzZXJzOnVwZGF0ZSIsInVzZXJzOmRlbGV0ZSIsImN1c3RvbWVyczpjcmVhdGUiLCJjdXN0b21lcnM6cmVhZCIsImN1c3RvbWVyczp1cGRhdGUiLCJjdXN0b21lcnM6ZGVsZXRlIiwiam9iczpjcmVhdGUiLCJqb2JzOnJlYWQiLCJqb2JzOnVwZGF0ZSIsImpvYnM6ZGVsZXRlIiwiZXN0aW1hdGVzOmNyZWF0ZSIsImVzdGltYXRlczpyZWFkIiwiZXN0aW1hdGVzOnVwZGF0ZSIsInJlcG9ydHM6cmVhZCIsInN5c3RlbV9zZXR0aW5nczp1cGRhdGUiXSwiaWF0IjoxNzU5MzY3MzMzLCJleHAiOjE3NTkzNzA5MzN9.uIVsaFazEbC_QvG7SiM9ZJxoV0A5-ejemYg7p6xnq2Y\")",
      "Bash(python:*)",
      "Bash(dir:*)",
      "Bash(findstr:*)",
      "Bash(npm audit:*)",
      "Bash(npm test:*)",
      "Bash(npx tsc:*)",
      "Bash(npm outdated:*)",
      "Bash(npm run lint)",
      "Bash(npm ls:*)",
      "Bash(powershell:*)",
      "Bash(npx license-checker:*)",
      "Bash(npm view:*)",
      "WebSearch",
      "Bash(if exist .huskypre-commit type .huskypre-commit)",
      "Bash(if exist .githookspre-commit type .githookspre-commit)",
      "Bash(rm:*)",
      "Bash(gh pr:*)",
      "Bash(git diff:*)",
      "Bash(npm run build:api:*)",
      "Bash(nx build:*)",
      "Bash(npx nx build:*)",
      "Bash(npm install:*)",
      "Bash(tree:*)",
      "Bash(cat:*)",
      "Bash(npm run build:*)",
      "Bash(npm run lint:*)",
      "Bash(npx next:*)",
      "Bash(npm run build:web:*)",
      "Bash(wc:*)",
      "Bash(awk:*)",
      "Bash(for module in documents crew-schedule messages notifications)",
      "Bash(do if [ ! -d \"$module\" ])",
      "Bash(then echo \"MISSING: $module\")",
      "Bash(fi)",
      "Bash(done)",
      "Bash(for dir in leads partners documents crew notifications)",
      "Bash(do indexFile=\"D:\\Claude\\SimplePro-v3\\apps\\web\\src\\app\\components$dir\\index.ts\")",
      "Bash(if [ ! -f \"$indexFile\" ])",
      "Bash(then echo \"MISSING INDEX: $indexFile\")",
      "Bash(npm run routes:*)",
      "Bash(for module in crew-schedule documents messages notifications)",
      "Bash(do echo \"=== Checking $module ===\")",
      "Bash(if [ -d \"$module\" ])",
      "Bash(then echo \"EXISTS\")",
      "Bash(ls:*)",
      "Bash(else echo \"MISSING\")",
      "Bash(for file in PaymentGateway SmsCampaigns)",
      "Bash(do if [ ! -f \"company/$file.tsx\" ])",
      "Bash(then echo \"MISSING: company/$file.tsx\")",
      "Bash(for file in ParkingOptions Regions CancellationReasons TagsManagement)",
      "Bash(do if [ ! -f \"estimates/lists/$file.tsx\" ])",
      "Bash(then echo \"MISSING: estimates/lists/$file.tsx\")",
      "Bash(for file in CommonSettings CustomFields PriceRanges)",
      "Bash(do if [ ! -f \"estimates/$file.tsx\" ])",
      "Bash(then echo \"MISSING: estimates/$file.tsx\")",
      "Bash(for file in ValuationTemplates OpportunityTypes)",
      "Bash(do if [ ! -f \"tariffs/$file.tsx\" ])",
      "Bash(then echo \"MISSING: tariffs/$file.tsx\")",
      "Bash(for file in CrewManagement DispatchSettings MobileAppConfig Notifications)",
      "Bash(do if [ ! -f \"operations/$file.tsx\" ])",
      "Bash(then echo \"MISSING: operations/$file.tsx\")",
      "Bash(find:*)",
      "Bash(echo:*)",
      "Bash(for file in ./estimates/lists/Regions.tsx ./estimates/lists/TagsManagement.tsx ./estimates/PriceRanges.tsx ./estimates/CommonSettings.tsx ./operations/CrewManagement.tsx ./operations/DispatchSettings.tsx ./operations/MobileAppConfig.tsx ./operations/Notifications.tsx ./company/AuditLogs.tsx ./company/CompanySettings.tsx ./company/PaymentGateway.tsx ./company/SmsCampaigns.tsx ./tariffs/AutoPricingEngine.tsx ./tariffs/HourlyRates.tsx ./tariffs/LocationHandicaps.tsx ./tariffs/MaterialsPricing.tsx ./tariffs/OpportunityTypes.tsx ./tariffs/PackingRates.tsx ./tariffs/ValuationTemplates.tsx)",
      "Bash(do sed -i \"s/const \\[loading, setLoading\\]/const [_loading, setLoading]/g\" \"$file\")",
      "Bash(for:*)",
      "Bash(do grep -n \"disabled={loading}\" \"$file\")",
      "Bash(do sed -i \"s/const \\[_loading, setLoading\\]/const [loading, setLoading]/g\" \"$file\")",
      "Bash(grep:*)",
      "Bash(docker-compose:*)",
      "Bash(npm run test:api:*)",
      "Bash(test:*)",
      "Bash(Select-Object -First 100)",
      "Bash(npx nx run:*)",
      "Bash(docker:*)",
      "Bash(node -p \"require(''./package.json'').dependencies.next\")",
      "Bash(timeout 10 npm run dev:api)",
      "Bash(timeout 15 npm run dev:api)",
      "Bash(npm run docker:dev:*)",
      "Bash(npm run test:coverage:api:*)",
      "Bash(lsof:*)",
      "Bash(netstat:*)",
      "Bash(npm run dev:api:*)",
      "Bash(npm run test:web:*)",
      "Bash(timeout 15 bash -c 'until curl -s http://localhost:3001/api/health > /dev/null; do sleep 1; done')",
      "Bash(npm run test:api:unit:*)",
      "Bash(if [ -d \"validation-reports\" ])",
      "Bash(then mv validation-reports/FINAL-PRODUCTION-READINESS-REPORT.md docs/reports/)",
      "Bash(else echo \"validation-reports not found\")",
      "Bash(git add:*)",
      "Bash(git check-ignore:*)",
      "Read(//d/**)",
      "Bash(npx nx show:*)",
      "Bash(npx nx bundle-android:*)",
      "Bash(npx react-native bundle:*)",
      "Bash(node -e \"console.log(''Faker installed:'', require(''@faker-js/faker'') ? ''yes'' : ''no'')\")",
      "Bash(chmod:*)",
      "Bash(icacls:*)",
      "Bash(cd:*)",
      "Bash(npm run test:coverage:*)",
      "Bash(npx npm-check-updates:*)",
      "Bash(npx jest:*)",
      "Bash(npx nx test:*)",
      "Bash(npm run test:*)",
      "Bash(node:*)",
      "Bash(bash scripts/setup-staging.sh:*)",
      "Bash(curl:*)",
      "Bash(if exist docsoperations dir docsoperations /b)",
      "Bash(npx nx dep-graph:*)",
      "Bash(cloc:*)",
      "Bash(npx depcheck:*)",
      "Bash(do echo -n \"$dir%/: \")"
    ],
    "deny": [],
    "ask": []
  },
  "outputStyle": "default"
}