# Staging Configuration - SimplePro v3
# Production-like configuration with relaxed rate limiting for testing

# Upstream servers for staging
upstream api_backend {
    server api:4000 max_fails=3 fail_timeout=30s;
    keepalive 32;
}

upstream web_backend {
    server web:3009 max_fails=3 fail_timeout=30s;
    keepalive 32;
}

# Monitoring upstream
upstream monitoring_backend {
    server grafana:3000;
    keepalive 8;
}

# Rate limiting for staging (more lenient for testing)
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=500r/m;
limit_req_zone $binary_remote_addr zone=web_limit:10m rate=1000r/m;
limit_req_zone $binary_remote_addr zone=monitoring_limit:10m rate=100r/m;

# Connection limiting
limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
limit_conn_zone $server_name zone=conn_limit_per_server:10m;

# HTTP server - redirects all traffic to HTTPS
server {
    listen 80 default_server;
    server_name _;

    # Security headers even for redirects
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options DENY;

    # Health check endpoint (HTTP allowed)
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # Redirect all other traffic to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

# HTTPS server - staging configuration
server {
    listen 443 ssl http2 default_server;
    server_name localhost;

    # Connection limits (higher for staging)
    limit_conn conn_limit_per_ip 50;
    limit_conn conn_limit_per_server 5000;

    # SSL Configuration - Self-signed certificate for staging
    ssl_certificate /etc/nginx/ssl/cert.pem;
    ssl_certificate_key /etc/nginx/ssl/key.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;

    # Security headers - Production-like but with staging indicators
    add_header Strict-Transport-Security "max-age=3600" always;
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' wss: ws:; frame-ancestors 'none'; base-uri 'self'; form-action 'self';" always;
    add_header Permissions-Policy "camera=(), microphone=(), geolocation=(), interest-cohort=()" always;

    # Staging environment indicator
    add_header X-Environment "staging" always;
    add_header X-Server "SimplePro-v3-Staging" always;

    # Hide server information
    server_tokens off;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Access and error logging (debug level for staging)
    access_log /var/log/nginx/staging_access.log combined;
    error_log /var/log/nginx/staging_error.log debug;

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # API routes
    location /api/ {
        # Rate limiting (relaxed for testing)
        limit_req zone=api_limit burst=100 nodelay;

        # Proxy configuration
        proxy_pass http://api_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_cache_bypass $http_upgrade;

        # Security headers for API
        proxy_hide_header X-Powered-By;
        proxy_hide_header Server;

        # Timeouts
        proxy_connect_timeout 10s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

        # Buffer settings
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;

        # CORS headers (permissive for staging testing)
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, PATCH, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;
        add_header Access-Control-Allow-Credentials true always;
        add_header Access-Control-Max-Age 3600 always;

        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "*" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, PATCH, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;
            add_header Access-Control-Max-Age 3600 always;
            add_header Content-Type "text/plain; charset=utf-8";
            add_header Content-Length 0;
            return 204;
        }
    }

    # Web application routes
    location / {
        limit_req zone=web_limit burst=200 nodelay;

        proxy_pass http://web_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_cache_bypass $http_upgrade;

        # Security headers for web
        proxy_hide_header X-Powered-By;
        proxy_hide_header Server;

        # Timeouts
        proxy_connect_timeout 10s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

        # Static asset caching
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 30d;
            add_header Cache-Control "public, immutable";
            add_header X-Content-Type-Options "nosniff";
            add_header X-Cache-Status "STATIC";
        }
    }

    # Monitoring access (relaxed for staging)
    location /monitoring/ {
        limit_req zone=monitoring_limit burst=20 nodelay;

        # Remove /monitoring prefix and proxy to Grafana
        rewrite ^/monitoring/(.*)$ /$1 break;
        proxy_pass http://monitoring_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Block access to sensitive files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    location ~ /(\.env|\.git|\.svn|\.htaccess|\.htpasswd|config\.json|package\.json) {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Block common exploit attempts (but log for analysis in staging)
    location ~* (\/wp-admin|\/wp-login|\/phpMyAdmin|\/admin|\/administrator|\/phpmyadmin) {
        access_log /var/log/nginx/exploit_attempts.log combined;
        return 404;
    }

    # Handle common files
    location = /favicon.ico {
        try_files $uri =204;
        access_log off;
        log_not_found off;
    }

    location = /robots.txt {
        try_files $uri =204;
        access_log off;
        log_not_found off;
    }
}
