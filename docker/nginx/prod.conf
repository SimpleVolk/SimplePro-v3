# Production Configuration - SimplePro v3
# Secure production configuration with strict security headers and rate limiting

# Upstream servers for production
upstream api_backend {
    server api:4000 max_fails=3 fail_timeout=30s;
    keepalive 32;
}

upstream web_backend {
    server web:3000 max_fails=3 fail_timeout=30s;
    keepalive 32;
}

# Monitoring upstream (internal access only)
upstream monitoring_backend {
    server grafana:3000;
    keepalive 8;
}

# Rate limiting for production (strict)
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=100r/m;
limit_req_zone $binary_remote_addr zone=web_limit:10m rate=200r/m;
limit_req_zone $binary_remote_addr zone=monitoring_limit:10m rate=10r/m;

# Connection limiting
limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
limit_conn_zone $server_name zone=conn_limit_per_server:10m;

# Security - Block known bad IPs (can be populated from fail2ban or threat intelligence)
geo $blocked_country {
    default 0;
    # Add countries to block if needed
    # CN 1;  # Example: block China
}

# Security - Rate limit by request type
map $request_method $limit {
    default         "";
    POST            $binary_remote_addr;
    PUT             $binary_remote_addr;
    DELETE          $binary_remote_addr;
}

limit_req_zone $limit zone=write_ops:10m rate=30r/m;

# HTTP server - redirects all traffic to HTTPS
server {
    listen 80 default_server;
    server_name _;

    # Security headers even for redirects
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options DENY;

    # Health check endpoint (HTTP allowed)
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # Redirect all other traffic to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

# HTTPS server - production configuration
server {
    listen 443 ssl http2 default_server;
    server_name ${DOMAIN_NAME:-localhost};

    # Connection limits
    limit_conn conn_limit_per_ip 10;
    limit_conn conn_limit_per_server 1000;

    # SSL Configuration - Production Grade
    ssl_certificate /etc/nginx/ssl/cert.pem;
    ssl_certificate_key /etc/nginx/ssl/key.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:50m;
    ssl_session_timeout 1d;
    ssl_session_tickets off;

    # OCSP stapling
    ssl_stapling on;
    ssl_stapling_verify on;

    # Security headers - Production Grade
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' wss: ws:; frame-ancestors 'none'; base-uri 'self'; form-action 'self';" always;
    add_header Permissions-Policy "camera=(), microphone=(), geolocation=(), interest-cohort=()" always;
    add_header X-Permitted-Cross-Domain-Policies "none" always;
    add_header Cross-Origin-Embedder-Policy "require-corp" always;
    add_header Cross-Origin-Opener-Policy "same-origin" always;
    add_header Cross-Origin-Resource-Policy "same-origin" always;

    # Hide server information
    server_tokens off;
    more_clear_headers Server;
    add_header X-Server "SimplePro-v3" always;

    # Gzip compression with security considerations
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Access and error logging
    access_log /var/log/nginx/prod_access.log main;
    error_log /var/log/nginx/prod_error.log warn;

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # API routes with strict security
    location /api/ {
        # Rate limiting
        limit_req zone=api_limit burst=20 nodelay;
        limit_req zone=write_ops burst=10 nodelay;

        # Security checks
        if ($blocked_country) {
            return 403 "Access denied from your location";
        }

        # Block common attack patterns
        if ($request_uri ~* "(\<|%3C).*script.*(\>|%3E)") {
            return 403 "XSS attempt detected";
        }

        if ($query_string ~* "[;'\x22\x27\x3D\x3C\x3E\x00\x0A\x0D]") {
            return 403 "Malicious query detected";
        }

        # Proxy configuration
        proxy_pass http://api_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_cache_bypass $http_upgrade;

        # Security headers for API
        proxy_hide_header X-Powered-By;
        proxy_hide_header Server;

        # Timeouts
        proxy_connect_timeout 5s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;

        # Buffer settings
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;

        # CORS headers (restrictive)
        add_header Access-Control-Allow-Origin "${CORS_ORIGIN}";
        add_header Access-Control-Allow-Methods "GET, POST, PUT, PATCH, DELETE, OPTIONS";
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization";
        add_header Access-Control-Allow-Credentials true;
        add_header Access-Control-Max-Age 3600;

        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            return 204;
        }
    }

    # Web application routes
    location / {
        limit_req zone=web_limit burst=50 nodelay;

        # Security checks
        if ($blocked_country) {
            return 403 "Access denied from your location";
        }

        proxy_pass http://web_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_cache_bypass $http_upgrade;

        # Security headers for web
        proxy_hide_header X-Powered-By;
        proxy_hide_header Server;

        # Static asset caching with security
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header X-Content-Type-Options "nosniff";
            add_header X-Cache-Status "STATIC";

            # Security for static assets
            location ~* \.(js)$ {
                add_header Content-Security-Policy "script-src 'self'";
            }
        }
    }

    # Internal monitoring access (restricted)
    location /internal/monitoring/ {
        # Restrict to internal networks only
        allow 172.16.0.0/12;    # Docker networks
        allow 10.0.0.0/8;       # Private networks
        allow 192.168.0.0/16;   # Private networks
        allow 127.0.0.1;        # Localhost
        deny all;

        limit_req zone=monitoring_limit burst=5 nodelay;

        # Remove /internal/monitoring prefix and proxy to Grafana
        rewrite ^/internal/monitoring/(.*)$ /$1 break;
        proxy_pass http://monitoring_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Security - block access to sensitive files and directories
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    location ~ /(\.env|\.git|\.svn|\.htaccess|\.htpasswd|config\.json|package\.json) {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Block common exploit attempts
    location ~* (\/wp-admin|\/wp-login|\/phpMyAdmin|\/admin|\/administrator|\/phpmyadmin) {
        return 404;
        access_log off;
        log_not_found off;
    }

    # Block requests for common non-existent files
    location = /favicon.ico {
        try_files $uri =204;
        access_log off;
        log_not_found off;
    }

    location = /robots.txt {
        try_files $uri =204;
        access_log off;
        log_not_found off;
    }
}