version: '3.9'

services:
  # Production Nginx Reverse Proxy with SSL Termination
  nginx:
    image: nginx:alpine
    container_name: simplepro-nginx-prod
    restart: unless-stopped
    ports:
      - '80:80' # HTTP (redirects to HTTPS)
      - '443:443' # HTTPS only
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/prod.conf:/etc/nginx/conf.d/default.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - frontend-network
      - backend-network
    depends_on:
      - api
      - web
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost/health']
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # SimplePro API (Production)
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
      target: production
    container_name: simplepro-api-prod
    restart: unless-stopped
    # No direct port exposure - only accessible via nginx
    environment:
      NODE_ENV: production
      PORT: 4000
      DATABASE_URL: mongodb://${MONGODB_USERNAME:-admin}:${MONGODB_PASSWORD}@mongodb:27017/simplepro_prod?authSource=admin
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      CORS_ORIGIN: ${CORS_ORIGIN}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    networks:
      - backend-network
      - storage-network
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:4000/api/health']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    volumes:
      - ./logs:/app/logs
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID

  # SimplePro Web Application (Production)
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
      target: production
    container_name: simplepro-web-prod
    restart: unless-stopped
    # No direct port exposure - only accessible via nginx
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
    networks:
      - frontend-network
    depends_on:
      - api
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

  # MongoDB Database (Secure Internal Network)
  mongodb:
    image: mongo:7.0
    container_name: simplepro-mongodb-prod
    restart: unless-stopped
    # No port exposure - internal network only
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD}
      MONGO_INITDB_DATABASE: simplepro_prod
    volumes:
      - mongodb_data:/data/db
      - ./docker/mongodb/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
      - ./docker/mongodb/mongod.conf:/etc/mongod.conf:ro
    networks:
      - storage-network
    healthcheck:
      test: ['CMD', 'mongosh', '--eval', "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

  # Redis Cache (Secure Internal Network)
  redis:
    image: redis:7-alpine
    container_name: simplepro-redis-prod
    restart: unless-stopped
    # No port exposure - internal network only
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - storage-network
    healthcheck:
      test: ['CMD', 'redis-cli', '-a', '${REDIS_PASSWORD}', 'ping']
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

  # MinIO (S3-compatible storage) - Secure Internal Network
  minio:
    image: minio/minio:latest
    container_name: simplepro-minio-prod
    restart: unless-stopped
    # No port exposure - internal network only
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_BROWSER_REDIRECT_URL: ${MINIO_BROWSER_REDIRECT_URL}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - storage-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 30s
      timeout: 20s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

  # Monitoring with Prometheus (Internal Network Only)
  prometheus:
    image: prom/prometheus:latest
    container_name: simplepro-prometheus
    restart: unless-stopped
    # No port exposure - internal network only (accessible via nginx if needed)
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.listen-address=0.0.0.0:9090'
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./docker/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    networks:
      - monitoring-network
      - storage-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

  # Grafana for metrics visualization (Internal Network Only)
  grafana:
    image: grafana/grafana:latest
    container_name: simplepro-grafana
    restart: unless-stopped
    # No port exposure - internal network only (accessible via nginx if needed)
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
      GF_SERVER_ROOT_URL: ${GRAFANA_ROOT_URL:-http://localhost/grafana/}
      GF_SERVER_SERVE_FROM_SUB_PATH: true
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - monitoring-network
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

  # MongoDB Exporter for Prometheus (Internal Network Only)
  mongodb-exporter:
    image: percona/mongodb_exporter:0.40
    container_name: simplepro-mongodb-exporter
    restart: unless-stopped
    # No port exposure - internal network only
    environment:
      MONGODB_URI: mongodb://${MONGODB_USERNAME:-admin}:${MONGODB_PASSWORD}@mongodb:27017/admin
    command:
      - '--mongodb.uri=mongodb://${MONGODB_USERNAME:-admin}:${MONGODB_PASSWORD}@mongodb:27017/admin'
      - '--collect-all'
    networks:
      - monitoring-network
      - storage-network
    depends_on:
      mongodb:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

  # Redis Exporter for Prometheus (Internal Network Only)
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: simplepro-redis-exporter
    restart: unless-stopped
    # No port exposure - internal network only
    environment:
      REDIS_ADDR: redis://redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    networks:
      - monitoring-network
      - storage-network
    depends_on:
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 64M
        reservations:
          memory: 32M
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

  # Node Exporter for system metrics (Internal Network Only)
  node-exporter:
    image: prom/node-exporter:latest
    container_name: simplepro-node-exporter
    restart: unless-stopped
    # No port exposure - internal network only
    command:
      - '--path.rootfs=/host'
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/host:ro
    networks:
      - monitoring-network
    deploy:
      resources:
        limits:
          memory: 64M
        reservations:
          memory: 32M
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  # Frontend network - external access via nginx only
  frontend-network:
    driver: bridge
    internal: false
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/24
          gateway: 172.20.0.1

  # Backend network - API and internal service communication
  backend-network:
    driver: bridge
    internal: true
    ipam:
      driver: default
      config:
        - subnet: 172.21.0.0/24

  # Storage network - databases and file storage
  storage-network:
    driver: bridge
    internal: true
    ipam:
      driver: default
      config:
        - subnet: 172.22.0.0/24

  # Monitoring network - observability tools
  monitoring-network:
    driver: bridge
    internal: true
    ipam:
      driver: default
      config:
        - subnet: 172.23.0.0/24
